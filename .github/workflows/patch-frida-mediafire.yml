      - name: Copy Frida dylib into app & inject into dfxm (safe, diagnostic)
        run: |
          set -euo pipefail
          echo "Working dir contents:"
          ls -la

          # ensure the extracted IPA exists
          if [ ! -d work_unzip/Payload ]; then
            echo "ERROR: work_unzip/Payload missing"; find . -maxdepth 3 -ls || true; exit 1
          fi

          # find the app .app folder (auto-detect)
          APP_PATH=$(find work_unzip/Payload -type d -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "ERROR: no .app found under work_unzip/Payload"; find work_unzip -maxdepth 4 -ls; exit 1
          fi
          echo "Found app: $APP_PATH"

          # make sure the dfxm executable exists inside the .app
          EXE_PATH="$APP_PATH/dfxm"
          if [ ! -f "$EXE_PATH" ]; then
            echo "WARNING: expected dfxm at $EXE_PATH not found; listing app:"
            ls -la "$APP_PATH"
            # try CFBundleExecutable fallback
            if [ -f "$APP_PATH/Info.plist" ]; then
              execname=$(defaults read "$APP_PATH/Info.plist" CFBundleExecutable 2>/dev/null || true)
              if [ -n "$execname" ]; then
                EXE_PATH="$APP_PATH/$execname"
                echo "Using CFBundleExecutable fallback: $EXE_PATH"
              fi
            fi
            if [ ! -f "$EXE_PATH" ]; then
              echo "ERROR: executable not found. Aborting."; exit 1
            fi
          fi
          echo "Target executable: $EXE_PATH"

          # copy the dylib into Frameworks (ensure correct source path)
          mkdir -p "$APP_PATH/Frameworks"
          if [ -f frida-gadget-17.3.2-ios-universal.dylib ]; then
            cp frida-gadget-17.3.2-ios-universal.dylib "$APP_PATH/Frameworks/"
          elif [ -f work/frida-gadget-17.3.2-ios-universal.dylib ]; then
            cp work/frida-gadget-17.3.2-ios-universal.dylib "$APP_PATH/Frameworks/"
          else
            echo "ERROR: frida dylib not found in expected locations"; ls -la || true; exit 1
          fi
          chmod 755 "$APP_PATH/Frameworks/frida-gadget-17.3.2-ios-universal.dylib"
          echo "Copied frida gadget. Listing Frameworks:"
          ls -la "$APP_PATH/Frameworks"

          # ensure optool is available; try download prebuilt first, else build
          if ! command -v optool >/dev/null 2>&1; then
            echo "optool not found â€” trying prebuilt..."
            OPTZIP="https://github.com/alexzielenski/optool/releases/download/0.1/optool.zip"
            if curl -sSL "$OPTZIP" -o /tmp/optool.zip; then
              unzip -o /tmp/optool.zip -d /tmp/optool_tmp || true
              if [ -f /tmp/optool_tmp/optool ]; then
                sudo mv /tmp/optool_tmp/optool /usr/local/bin/optool
                sudo chmod +x /usr/local/bin/optool
              fi
            fi
          fi
          if ! command -v optool >/dev/null 2>&1; then
            echo "Building optool from source..."
            git clone https://github.com/alexzielenski/optool.git /tmp/optool_src
            cd /tmp/optool_src
            make || true
            if [ -f optool ]; then
              sudo mv optool /usr/local/bin/optool
            else
              echo "ERROR: optool not available after build attempt"; exit 1
            fi
            cd -
          fi
          echo "optool version/exists:"; optool --help | head -n 1 || true

          # inject LC_LOAD_DYLIB for frida
          echo "Running optool to install load command..."
          sudo /usr/local/bin/optool install -c load -p "@executable_path/Frameworks/frida-gadget-17.3.2-ios-universal.dylib" -t "$EXE_PATH" || { echo "optool injection failed"; exit 1; }
          echo "optool injection completed."

          # verify injection: prefer otool -L if available, else strings
          if command -v otool >/dev/null 2>&1; then
            echo "otool -L output (filtered for frida):"
            otool -L "$EXE_PATH" | grep -i frida || true
          else
            echo "otool not available; checking binary strings for frida entry"
            strings "$EXE_PATH" | grep -i frida || true
          fi

          echo "Copy+inject step finished successfully."
